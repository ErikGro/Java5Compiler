package de.unituebingen.compilerbau;

import de.unituebingen.compilerbau.ast.Clazz;
import de.unituebingen.compilerbau.codegen.CodeGenerator;
import de.unituebingen.compilerbau.exception.ASTException;
import de.unituebingen.compilerbau.exception.CodeGenException;
import de.unituebingen.compilerbau.exception.CompilerException;
import de.unituebingen.compilerbau.exception.TypeCheckException;
import de.unituebingen.compilerbau.scanner.ScannerParser;
import de.unituebingen.compilerbau.typing.TypeChecker;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

public class Compiler {
    private ScannerParser scannerParser = new ScannerParser();
    private TypeChecker typeChecker = new TypeChecker();
    private CodeGenerator codeGenerator = new CodeGenerator();

    /**
     * Compiles a single java 5 source code file
     * @param filePath Absolute path to the .java input file
     * @return Mapping of generated bytecode to Filename
     *
     * Example:
     * Source.java contains Classes "Source" and "Second"
     *
     * Input:
     * compiler.compile("/a/b/d/Source.java");
     *
     * Output:
     * {
     *     "Source.class" : bytecode,
     *     "Second.class" : bytecode
     * }
     */
    public Map<String, byte[]> compile(String filePath) throws CompilerException, IOException {
        InputStream inputStream = getClass().getClassLoader().getResourceAsStream(filePath);
        String input = readFromInputStream(inputStream);

        // Generate AST from input file
        // TODO: Output should be Map<String, Clazz> where keys are .class file names
        // TODO: Get .class file names from AST's
        Clazz clazz = scannerParser.parse(input);

        // Type check generated AST
        // TODO: Input should be Map<String, Clazz> where keys are .class file names
        typeChecker.check(clazz);

        // Generate bytecode from AST
        // TODO: Input & Output should be Map<String, Clazz> where keys are .class file names
        byte[] bytecode = codeGenerator.generateBytecode(clazz);

        Map<String, byte[]> resultMap = new HashMap<>();
        resultMap.put(filePath, bytecode);

        return resultMap;
    }

    private String readFromInputStream(InputStream inputStream) throws IOException {
        StringBuilder resultStringBuilder = new StringBuilder();

        try (BufferedReader br = new BufferedReader(new InputStreamReader(inputStream))) {
            String line;
            while ((line = br.readLine()) != null) {
                resultStringBuilder.append(line).append("\n");
            }
        }

        return resultStringBuilder.toString();
    }
}
