package de.unituebingen.compilerbau;

import de.unituebingen.compilerbau.ast.Clazz;
import de.unituebingen.compilerbau.codegen.CodeGenerator;
import de.unituebingen.compilerbau.exception.CompilerException;
import de.unituebingen.compilerbau.scanner.ScannerParser;
import de.unituebingen.compilerbau.typing.TypeChecker;

import java.io.*;
import java.util.HashMap;
import java.util.Map;

public class Compiler
{
    private ScannerParser scannerParser = new ScannerParser();
    private TypeChecker typeChecker = new TypeChecker();
    private CodeGenerator codeGenerator = new CodeGenerator();

    /**
     * Compiles a single java 5 source code file
     *
     * @param filePath Absolute path to the .java input file
     *
     * @return Mapping of .class-filenames to generated bytecode
     * <p>
     * Example: Source.java contains Classes "Source" and "Second"
     * <p>
     * Input: compiler.compile("/a/b/d/Source.java");
     * <p>
     * Output: { "Source.class" : bytecode, "Second.class" : bytecode }
     */
    public Map<String, byte[]> compile(String filePath) throws CompilerException, IOException, CloneNotSupportedException {
        String input = readFromInputStream(new FileInputStream(filePath));

        // Generate AST from input file
        Map<String, Clazz> clazzes = scannerParser.parse(input);

        // Type check generated AST
        typeChecker.check(clazzes);

        // Generate bytecode from AST
        byte[] bytecode = codeGenerator.generateBytecode(clazzes);

        Map<String, byte[]> resultMap = new HashMap<>();
        resultMap.put(filePath, bytecode);

        return resultMap;
    }

    private String readFromInputStream(InputStream inputStream) throws IOException
    {
        StringBuilder resultStringBuilder = new StringBuilder();

        try (BufferedReader br = new BufferedReader(new InputStreamReader(inputStream)))
        {
            String line;
            while ((line = br.readLine()) != null)
            {
                resultStringBuilder.append(line).append("\n");
            }
        }

        return resultStringBuilder.toString();
    }
}
